/*
 * #%L
 * prolobjectlink-db
 * %%
 * Copyright (C) 2012 - 2018 Logicware Project
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Nov 08 20:02:19 CET 2018
//----------------------------------------------------

package org.logicware.pdb.ql.jpql;

import org.logicware.pdb.ql.BoolExp;
import org.logicware.pdb.ql.Dekl;
import org.logicware.pdb.ql.DeklList;
import org.logicware.pdb.ql.Exp;
import org.logicware.pdb.ql.ExpList;
import org.logicware.pdb.ql.Ident;
import org.logicware.pdb.ql.Number;
import org.logicware.pdb.ql.ParList;
import org.logicware.pdb.ql.Program;

/** CUP v0.10k generated parser.
  * @version Thu Nov 08 20:02:19 CET 2018
  */
public class JpqlParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public JpqlParser() {super();}

  /** Constructor which sets the default scanner. */
  public JpqlParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\030\000\002\003\013\000\002\002\004\000\002\004" +
    "\003\000\002\004\005\000\002\006\003\000\002\006\005" +
    "\000\002\007\010\000\002\005\003\000\002\005\005\000" +
    "\002\010\003\000\002\010\003\000\002\010\006\000\002" +
    "\010\005\000\002\010\004\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\011" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\012\003\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\004\004\004\001\002\000\004\030\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\044\005\uffeb\006\uffeb\007\uffeb\010\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb" +
    "\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\001\002\000" +
    "\010\005\uffff\015\uffff\017\uffff\001\002\000\006\005\013" +
    "\015\012\001\002\000\004\030\007\001\002\000\004\030" +
    "\007\001\002\000\006\006\ufffd\015\ufffd\001\002\000\006" +
    "\006\071\015\070\001\002\000\004\016\017\001\002\000" +
    "\004\030\007\001\002\000\006\015\012\017\021\001\002" +
    "\000\004\020\022\001\002\000\014\011\030\016\024\023" +
    "\026\030\007\031\023\001\002\000\040\006\uffea\007\uffea" +
    "\010\uffea\012\uffea\013\uffea\014\uffea\015\uffea\017\uffea\020" +
    "\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea" +
    "\001\002\000\014\011\030\016\024\023\026\030\007\031" +
    "\023\001\002\000\040\006\ufff8\007\ufff8\010\ufff8\012\ufff8" +
    "\013\ufff8\014\ufff8\015\ufff8\017\ufff8\020\ufff8\021\ufff8\022" +
    "\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\001\002\000\014" +
    "\011\030\016\024\023\026\030\007\031\023\001\002\000" +
    "\042\006\ufff7\007\ufff7\010\ufff7\012\ufff7\013\ufff7\014\ufff7" +
    "\015\ufff7\016\057\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023" +
    "\ufff7\024\ufff7\025\ufff7\026\ufff7\001\002\000\014\011\030" +
    "\016\024\023\026\030\007\031\023\001\002\000\016\006" +
    "\ufffb\015\ufffb\023\033\024\032\025\035\026\034\001\002" +
    "\000\014\011\030\016\024\023\026\030\007\031\023\001" +
    "\002\000\014\011\030\016\024\023\026\030\007\031\023" +
    "\001\002\000\014\011\030\016\024\023\026\030\007\031" +
    "\023\001\002\000\014\011\030\016\024\023\026\030\007" +
    "\031\023\001\002\000\040\006\ufff2\007\ufff2\010\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\015\ufff2\017\ufff2\020\ufff2\021\ufff2" +
    "\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\001\002\000" +
    "\040\006\ufff1\007\ufff1\010\ufff1\012\ufff1\013\ufff1\014\ufff1" +
    "\015\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024" +
    "\ufff1\025\ufff1\026\ufff1\001\002\000\040\006\ufff0\007\ufff0" +
    "\010\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\035\026\034" +
    "\001\002\000\040\006\ufff3\007\ufff3\010\ufff3\012\ufff3\013" +
    "\ufff3\014\ufff3\015\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3" +
    "\023\ufff3\024\ufff3\025\035\026\034\001\002\000\020\020" +
    "\051\021\052\022\053\023\033\024\032\025\035\026\034" +
    "\001\002\000\004\012\044\001\002\000\014\011\030\016" +
    "\024\023\026\030\007\031\023\001\002\000\014\013\046" +
    "\023\033\024\032\025\035\026\034\001\002\000\014\011" +
    "\030\016\024\023\026\030\007\031\023\001\002\000\014" +
    "\014\050\023\033\024\032\025\035\026\034\001\002\000" +
    "\040\006\uffef\007\uffef\010\uffef\012\uffef\013\uffef\014\uffef" +
    "\015\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024" +
    "\uffef\025\uffef\026\uffef\001\002\000\014\011\030\016\024" +
    "\023\026\030\007\031\023\001\002\000\014\011\030\016" +
    "\024\023\026\030\007\031\023\001\002\000\014\011\030" +
    "\016\024\023\026\030\007\031\023\001\002\000\014\012" +
    "\uffec\023\033\024\032\025\035\026\034\001\002\000\014" +
    "\012\uffed\023\033\024\032\025\035\026\034\001\002\000" +
    "\014\012\uffee\023\033\024\032\025\035\026\034\001\002" +
    "\000\014\011\030\016\024\023\026\030\007\031\023\001" +
    "\002\000\022\007\ufffa\010\ufffa\015\ufffa\017\ufffa\023\033" +
    "\024\032\025\035\026\034\001\002\000\006\015\062\017" +
    "\063\001\002\000\014\011\030\016\024\023\026\030\007" +
    "\031\023\001\002\000\040\006\ufff6\007\ufff6\010\ufff6\012" +
    "\ufff6\013\ufff6\014\ufff6\015\ufff6\017\ufff6\020\ufff6\021\ufff6" +
    "\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\001\002\000" +
    "\022\007\ufff9\010\ufff9\015\ufff9\017\ufff9\023\033\024\032" +
    "\025\035\026\034\001\002\000\040\006\ufff4\007\ufff4\010" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\017\ufff4\020\ufff4" +
    "\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\001" +
    "\002\000\014\017\067\023\033\024\032\025\035\026\034" +
    "\001\002\000\040\006\ufff5\007\ufff5\010\ufff5\012\ufff5\013" +
    "\ufff5\014\ufff5\015\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\024\ufff5\025\ufff5\026\ufff5\001\002\000\004\030" +
    "\007\001\002\000\014\011\030\016\024\023\026\030\007" +
    "\031\023\001\002\000\006\010\073\015\062\001\002\000" +
    "\014\011\030\016\024\023\026\030\007\031\023\001\002" +
    "\000\006\007\075\015\062\001\002\000\004\002\001\001" +
    "\002\000\006\006\ufffc\015\ufffc\001\002\000\010\005\ufffe" +
    "\015\ufffe\017\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\004\003\004\001\001\000\006\004\010\012" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\076\001\001\000\010\006\014\007\013\012\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\017\012\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\030\012\026\013\024\001\001\000" +
    "\002\001\001\000\010\010\065\012\026\013\024\001\001" +
    "\000\002\001\001\000\010\010\064\012\026\013\024\001" +
    "\001\000\002\001\001\000\012\010\041\011\042\012\026" +
    "\013\024\001\001\000\002\001\001\000\010\010\040\012" +
    "\026\013\024\001\001\000\010\010\037\012\026\013\024" +
    "\001\001\000\010\010\036\012\026\013\024\001\001\000" +
    "\010\010\035\012\026\013\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\044\012\026" +
    "\013\024\001\001\000\002\001\001\000\010\010\046\012" +
    "\026\013\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\055\012\026\013\024\001\001\000\010\010" +
    "\054\012\026\013\024\001\001\000\010\010\053\012\026" +
    "\013\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\060\010\057\012\026\013\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\063\012\026\013\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\075\012\015\001\001\000\012\005\071" +
    "\010\057\012\026\013\024\001\001\000\002\001\001\000" +
    "\012\005\073\010\057\012\026\013\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JpqlParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JpqlParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JpqlParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$JpqlParser$actions {
  private final JpqlParser parser;

  /** Constructor */
  CUP$JpqlParser$actions(JpqlParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$JpqlParser$do_action(
    int                        CUP$JpqlParser$act_num,
    java_cup.runtime.lr_parser CUP$JpqlParser$parser,
    java.util.Stack            CUP$JpqlParser$stack,
    int                        CUP$JpqlParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JpqlParser$result;

      /* select the action based on the action number */
      switch (CUP$JpqlParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // number ::= NUMBER 
            {
              Number RESULT = null;
		int zleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).value;
		 RESULT = new JpqlNumber(z); 
              CUP$JpqlParser$result = new java_cup.runtime.Symbol(9/*number*/, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right, RESULT);
            }
          return CUP$JpqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ident ::= ID 
            {
              Ident RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).value;
		 RESULT = new JpqlIdent(n); 
              CUP$JpqlParser$result = new java_cup.runtime.Symbol(8/*ident*/, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right, RESULT);
            }
          return CUP$JpqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // boolexp ::= exp LEQ exp 
            {
              BoolExp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).value;
		 RESULT = new JpqlBoolExp(l,'!',r); 
              CUP$JpqlParser$result = new java_cup.runtime.Symbol(7/*boolexp*/, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right, RESULT);
            }
          return CUP$JpqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // boolexp ::= exp LE exp 
            {
              BoolExp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).value;
		 RESULT = new JpqlBoolExp(l,'<',r); 
              CUP$JpqlParser$result = new java_cup.runtime.Symbol(7/*boolexp*/, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right, RESULT);
            }
          return CUP$JpqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // boolexp ::= exp EQ exp 
            {
              BoolExp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).value;
		 RESULT = new JpqlBoolExp(l,'=',r); 
              CUP$JpqlParser$result = new java_cup.runtime.Symbol(7/*boolexp*/, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right, RESULT);
            }
          return CUP$JpqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= IF boolexp THEN exp ELSE exp FI 
            {
              Exp RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-5)).right;
		BoolExp b = (BoolExp)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-3)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-1)).value;
		 RESULT = new JpqlIfThenElse(b,t,e); 
              CUP$JpqlParser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right, RESULT);
            }
          return CUP$JpqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= exp MINUS exp 
            {
              Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).value;
		 RESULT = new JpqlExpInfix(l,'-',r); 
              CUP$JpqlParser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right, RESULT);
            }
          return CUP$JpqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= exp DIV exp 
            {
              Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).value;
		 RESULT = new JpqlExpInfix(l,'/',r); 
              CUP$JpqlParser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right, RESULT);
            }
          return CUP$JpqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= exp TIMES exp 
            {
              Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).value;
		 RESULT = new JpqlExpInfix(l,'*',r); 
              CUP$JpqlParser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right, RESULT);
            }
          return CUP$JpqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= exp PLUS exp 
            {
              Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).value;
		 RESULT = new JpqlExpInfix(l,'+',r); 
              CUP$JpqlParser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right, RESULT);
            }
          return CUP$JpqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= MINUS exp 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).value;
		 RESULT = new JpqlUminus(e); 
              CUP$JpqlParser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right, RESULT);
            }
          return CUP$JpqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp ::= LPAR exp RPAR 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-1)).value;
		 RESULT = e; 
              CUP$JpqlParser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right, RESULT);
            }
          return CUP$JpqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp ::= ident LPAR explist RPAR 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-3)).right;
		Ident i = (Ident)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-1)).right;
		ExpList e = (ExpList)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-1)).value;
		 RESULT = new JpqlFun(i,e); 
              CUP$JpqlParser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right, RESULT);
            }
          return CUP$JpqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp ::= ident 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right;
		Ident i = (Ident)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).value;
		 RESULT = i; 
              CUP$JpqlParser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right, RESULT);
            }
          return CUP$JpqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp ::= number 
            {
              Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right;
		Number n = (Number)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).value;
		 RESULT = n; 
              CUP$JpqlParser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right, RESULT);
            }
          return CUP$JpqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // explist ::= explist COMMA exp 
            {
              ExpList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).right;
		ExpList l = (ExpList)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).value;
		 RESULT = new JpqlExpList(l,e); 
              CUP$JpqlParser$result = new java_cup.runtime.Symbol(3/*explist*/, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right, RESULT);
            }
          return CUP$JpqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // explist ::= exp 
            {
              ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).value;
		 RESULT = new JpqlExpList(e); 
              CUP$JpqlParser$result = new java_cup.runtime.Symbol(3/*explist*/, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right, RESULT);
            }
          return CUP$JpqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dekl ::= ident LPAR parlist RPAR EQ exp 
            {
              Dekl RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-5)).right;
		Ident i = (Ident)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-3)).right;
		ParList p = (ParList)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).value;
		 RESULT = new JpqlDekl(i,p,e); 
              CUP$JpqlParser$result = new java_cup.runtime.Symbol(5/*dekl*/, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right, RESULT);
            }
          return CUP$JpqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dekllist ::= dekllist COMMA dekl 
            {
              DeklList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).right;
		DeklList l = (DeklList)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right;
		Dekl d = (Dekl)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).value;
		 RESULT = new JpqlDeklList(l,d); 
              CUP$JpqlParser$result = new java_cup.runtime.Symbol(4/*dekllist*/, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right, RESULT);
            }
          return CUP$JpqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dekllist ::= dekl 
            {
              DeklList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right;
		Dekl d = (Dekl)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).value;
		 RESULT = new JpqlDeklList(d);
              CUP$JpqlParser$result = new java_cup.runtime.Symbol(4/*dekllist*/, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right, RESULT);
            }
          return CUP$JpqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // parlist ::= parlist COMMA ident 
            {
              ParList RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).right;
		ParList p = (ParList)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right;
		Ident i = (Ident)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).value;
		 RESULT = new JpqlParList(p,i); 
              CUP$JpqlParser$result = new java_cup.runtime.Symbol(2/*parlist*/, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right, RESULT);
            }
          return CUP$JpqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // parlist ::= ident 
            {
              ParList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right;
		Ident i = (Ident)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).value;
		 RESULT = new JpqlParList(i); 
              CUP$JpqlParser$result = new java_cup.runtime.Symbol(2/*parlist*/, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right, RESULT);
            }
          return CUP$JpqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-1)).value;
		RESULT = start_val;
              CUP$JpqlParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$JpqlParser$parser.done_parsing();
          return CUP$JpqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= INPUT parlist FUNCTIONS dekllist OUTPUT explist ARGUMENTS explist END 
            {
              Program RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-7)).right;
		ParList p = (ParList)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-5)).right;
		DeklList d = (DeklList)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-3)).right;
		ExpList o = (ExpList)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-1)).right;
		ExpList a = (ExpList)((java_cup.runtime.Symbol) CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-1)).value;
		 RESULT = new JpqlProgram(p,d,o,a); 
              CUP$JpqlParser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$JpqlParser$stack.elementAt(CUP$JpqlParser$top-0)).right, RESULT);
            }
          return CUP$JpqlParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

