/*
 * #%L
 * prolobjectlink-db
 * %%
 * Copyright (C) 2012 - 2017 Logicware Project
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

package org.logicware.pdb.ql.jpql;

import org.logicware.pdb.ql.SymbolEntry;
import org.logicware.pdb.ql.SymbolTable;

import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file 
 * <tt>${basedir}/src/main/jflex/JpqlScanner.flex</tt>
 */
 
%%

%unicode

%public
%class JpqlScanner
%cup
%implements JpqlSymbols

%char
%line
%column



%{ 

  SymbolTable symtab;

   public void setSymtab(SymbolTable symtab) {
    this.symtab = symtab; 
  }

  private Symbol sym(int sym) {
    return new Symbol(sym);
  }

  private Symbol sym(int sym, Object val) {
    return new Symbol(sym, val);
  }
	
%}

%init{ 
  yybegin( NORMALSTATE ); 
%init} 


newline  = \r|\n|\r\n
atom 	 = [a-z][A-Za-z0-9_]*
complex	 = \'.[^\r\n\'\\]*.\'
variable = [A-Z_][A-Za-z0-9_]*
integer  = 0 | [1-9][0-9]*
float	 = [0-9]+ \. [0-9]+ | [0-9]+ \. [0-9]+

LineTerminator = \r|\n|\r\n
InputCharacter = [^\r\n]

WhiteSpace = {LineTerminator} | [ \t\f]

/* comments */
comment = {traditionalComment} | {endOfLineComment} | 
          {documentationComment}

traditionalComment = "/*" [^*] ~"*/" | "/*" "*"+ "/"
endOfLineComment = "%" {InputCharacter}* {LineTerminator}?
documentationComment = "/*" "*"+ [^/*] ~"*/"


%state NORMALSTATE
 
%%
 
<NORMALSTATE> { 

	"arguments"     { return sym(ARGUMENTS); }
    "input"         { return sym(INPUT); }
    "functions"     { return sym(FUNCTIONS); }
    "output"        { return sym(OUTPUT); }
    "end"           { return sym(END); }
    "if"            { return sym(IF); }
    "then"          { return sym(THEN); }
    "else"          { return sym(ELSE); }
    "fi"            { return sym(FI); }
    [a-z]+          { symtab.enter(yytext(),new SymbolEntry(yytext(),yyline));
                        return sym(ID,yytext()); }
    [0-9]+          { return sym(NUMBER,yytext()); }
    ","             { return sym(COMMA); }
    "("             { return sym(LPAR); }
    ")"             { return sym(RPAR); }
    "="             { return sym(EQ); }
    "-"             { return sym(MINUS); }
    "+"             { return sym(PLUS); }
    "*"             { return sym(TIMES); }
    "/"             { return sym(DIV); }
    "<"             { return sym(LE); }
    "<="            { return sym(LEQ); }
[\ \t\b\f\r\n]+     { /* eat whitespace */ }
    
	.               { return sym( error ); } 
} 
  
<<EOF>>      { return sym( EOF ); } 